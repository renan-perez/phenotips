<?xml version="1.0" encoding="UTF-8" ?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<!--
 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="orphanet" version="1.5">
  <types>
    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field for exact matching of identifiers/symbols -->
    <fieldType name="id" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field that does prefix matching of identifiers/symbols -->
    <fieldType name="id_prefix" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="10"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field: it tokenizes with StandardTokenizer,
         removes stop words from case-insensitive "stopwords.txt,
         protects keywords defined in "protwords.txt", down cases,
         and stems words using the possessive (remove 's) and the
         Porter English stemmer. At query time only, it also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>
<!--    Could be tried out: -->
<!--    <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/> -->
<!--    <filter class="solr.EnglishMinimalStemFilterFactory"/> -->

    <!-- Just like text_general except it reverses the characters of
         each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Uses the double metaphone filter for error-tolerant search -->
    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <!-- Field for exact matching of the terms in the query, without stemming
         or other disruptive text processing filters applied to it.
         It is also used to construct a spellcheck index from. It does basic
         tokenization and lowercasing, since it's only used as a source of
         valid words. -->
    <fieldType name="text_spell" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_prefix" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.LowerCaseTokenizerFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="2" maxGramSize="10"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.LowerCaseTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <fieldtype name="exact_match" class="solr.TextField" positionIncrementGap="1000">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1 SOLR_END_MARKER"/>
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1 SOLR_END_MARKER"/>
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="prefix_match" class="solr.TextField" positionIncrementGap="1000">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1"/>
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1*"/>
        <tokenizer class="solr.ClassicTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldtype>

    <!-- Since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />
  </types>

  <fields>
    <field name="version" type="string" indexed="true" stored="true" omitNorms="true"/>

    <field name="id" type="string" indexed="true" stored="true" required="true" />
    <field name="idStub" type="id_prefix" indexed="true" stored="false" omitNorms="true"/>

    <!-- The primary name of the disease -->
    <field name="name" type="text_general" indexed="true" stored="true"/>
    <field name="nameSpell" type="text_spell" indexed="true" stored="false"/>
    <field name="nameExact" type="exact_match" indexed="true" stored="false" omitNorms="true"/>
    <field name="namePrefix" type="prefix_match" indexed="true" stored="false" omitNorms="true"/>
    <field name="nameStub" type="text_prefix" indexed="true" stored="false" omitNorms="true"/>
    <field name="nameSort" type="string" indexed="true" stored="false"/>

    <field name="term_group" type="string" indexed="true" stored="true"/>

    <field name="is_a" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="term_category" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="part_of" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="age_of_onset" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="present_in" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="birth_prevalence" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="lifetime_prevalence" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="point_prevalence" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="birth_prevalence_avg" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="lifetime_prevalence_avg" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="point_prevalence_avg" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="inheritance" type="string" indexed="true" stored="true" multiValued="true"/>

    <!--OMIM HGNC Ensembl ids related to this entry. Some Orphanet terms have multiple linked external db ids.-->
    <dynamicField name="*_id" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="def" type="text_general" indexed="true" stored="true"/>
    <field name="defSpell" type="text_spell" indexed="true" stored="false"/>
    <field name="defSort" type="string" indexed="true" stored="false"/>

    <!-- alternative definitions and names -->
    <field name="alternative_term" type="text_general" indexed="true" stored="true" multiValued="true"/>
    <field name="alternative_termSpell" type="text_spell" indexed="true" stored="false" multiValued="true"/>
    <field name="alternative_termExact" type="exact_match" indexed="true" stored="false" multiValued="true" omitNorms="true"/>
    <field name="alternative_termPrefix" type="prefix_match" indexed="true" stored="false" multiValued="true" omitNorms="true"/>
    <field name="alternative_termStub" type="text_prefix" indexed="true" stored="false" multiValued="true" omitNorms="true"/>

    <!-- only gene documents will have this (diseases and phenotypes wont.) -->
    <field name="gene_symbol" type="text_ws" indexed="true" stored="true"/>

    <!-- Catchall field, containing all other searchable text fields (implemented
         via copyField further on in this schema).  -->
    <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>
    <field name="textSpell" type="text_spell" indexed="true" stored="false" multiValued="true"/>
    <field name="textStub" type="text_prefix" indexed="true" stored="false" multiValued="true" omitNorms="true"/>

    <!-- Catchall text field that indexes tokens both normally and in reverse for efficient
         leading wildcard queries. -->
    <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

    <dynamicField name="*" type="ignored" multiValued="true" />
  </fields>

  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>id</uniqueKey>

  <copyField source="id" dest="idStub"/>

  <copyField source="has_AgeOfOnset" dest="age_of_onset"/>
  <copyField source="symbol" dest="gene_symbol"/>

  <copyField source="label" dest="name"/>
  <copyField source="label" dest="nameSpell"/>
  <copyField source="label" dest="nameExact"/>
  <copyField source="label" dest="namePrefix"/>
  <copyField source="label" dest="nameStub"/>
  <copyField source="label" dest="nameSort"/>

  <copyField source="definition" dest="def"/>
  <copyField source="definition" dest="defSort"/>
  <copyField source="definition" dest="defSpell"/>

  <copyField source="alternative_term" dest="alternative_termSpell"/>
  <copyField source="alternative_term" dest="alternative_termExact"/>
  <copyField source="alternative_term" dest="alternative_termPrefix"/>
  <copyField source="alternative_term" dest="alternative_termStub"/>

  <copyField source="has_point_prevalence_range" dest="point_prevalence"/>
  <copyField source="has_birth_prevalence_range" dest="birth_prevalence"/>
  <copyField source="has_lifetime_prevalence_range" dest="lifetime_prevalence"/>
  <copyField source="has_point_prevalence_average_value" dest="point_prevalence_avg"/>
  <copyField source="has_birth_prevalence_average_value" dest="birth_prevalence_avg"/>
  <copyField source="has_lifetime_prevalence_average_value" dest="lifetime_prevalence_avg"/>
  <copyField source="has_inheritance" dest="inheritance"/>

  <copyField source="*" dest="text"/>
  <copyField source="*" dest="textSpell"/>
  <copyField source="*" dest="textStub"/>
</schema>
